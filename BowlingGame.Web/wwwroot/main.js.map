{"version":3,"sources":["./src/app/notifications.service.ts","./src/app/bowling-game.service.ts","./src/environments/environment.ts","./src/app/components/contestants/contestants.component.ts","./src/app/components/contestants/contestants.component.html","./src/app/components/notifications/notifications.component.ts","./src/app/components/notifications/notifications.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/leaderboard/leaderboard.component.ts","./src/app/components/leaderboard/leaderboard.component.html","./src/app/components/contestant-detail/contestant-detail.component.ts","./src/app/components/contestant-detail/contestant-detail.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Contestant } from './interfaces/contestant';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n  notifications: string[] = [];\n\n  add(message: string) {\n    this.notifications.push(message);\n  }\n\n  addRoll(contestant: Contestant, rollAmount: number) {\n    this.notifications.push(`${contestant.contestantName} knocked ${rollAmount} pins. Next throw has maximum of ${contestant.pinsLeft}.`);\n  }\n\n  clear() {\n    this.notifications = [];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Contestant } from './interfaces/contestant';\nimport { NotificationsService } from './notifications.service'\nimport { Leaderboard } from './interfaces/leaderboard';\r\nimport { environment } from '../environments/environment';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BowlingGameService {\n  private domain: string;\n  private bowlingApiUrl = '/api/bowling';\n  isGameComplete: boolean;\n  isGameUnderway: boolean;\n  checkingForGame: boolean;\n  leaderboard: Leaderboard[];\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  constructor(private http: HttpClient, private notificationService: NotificationsService)\n  {\n    this.domain = environment.apiBaseUrl;\n    this.isGameComplete = false;\n    this.isGameUnderway = false;\n    this.checkingForGame = true;\n    this.leaderboard = [];\n\n    this.checkForExistingGame().subscribe(x => this.isGameUnderway = x);\n    this.checkExistingGameComplete().subscribe(x => this.checkGameComplete(x));\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\n  }\n\n  private checkGameComplete(isComplete: boolean): void {\n    this.isGameComplete = isComplete;\n    this.checkingForGame = false\r\n  }\n\n  refreshLeaderboard(): void {\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\r\n  }\n  refreshPage(): void {\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\r\n  }\n  beginGame(): void {\n    this.isGameUnderway = true;\n    this.isGameComplete = false;\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\r\n    this.log('Game has begun');\r\n  }\n  resetGame(): void {\n    this.reset().subscribe(_ => this.isGameUnderway = false);\n    this.isGameComplete = false;\r\n    this.refreshLeaderboard();\r\n  }\n\n  //Post, intentionally implemented synchronously\n  async roll(contestant: Contestant, pinsKnocked: number): Promise<number> {\n    return await this.http.post<number>(`${this.domain}${this.bowlingApiUrl}/roll`, { contestantName: contestant.contestantName, pinsKnocked: pinsKnocked }, this.httpOptions).toPromise();\n  }\n  async addContestants(contestants: Contestant[]): Promise<boolean> {\n    return await this.http.post<boolean>(`${this.domain}${this.bowlingApiUrl}/addcontestants`, contestants, this.httpOptions).toPromise();\n  }\n\n  //Get\n  getLeaderboard(): Observable<Leaderboard[]> {\n    return this.http.get<Leaderboard[]>(`${this.domain}${this.bowlingApiUrl}/leaderboard`)\n      .pipe(\n        catchError(this.handleError<Leaderboard[]>('getLeaderboard', []))\n      );\n  }\n  getContestants(): Observable<Contestant[]> {\n    return this.http.get<Contestant[]>(`${this.domain}${this.bowlingApiUrl}/getcontestants`)\n      .pipe(\n        tap(_ => this.log('fetched contestants')),\n        catchError(this.handleError<Contestant[]>('getContestants', []))\n      );\n  }\n  checkForExistingGame(): Observable<boolean> {\n    return this.http.get<boolean>(`${this.domain}${this.bowlingApiUrl}/hasexisting`)\n      .pipe(\n        tap(x => this.isGameUnderway = x),\n        catchError(this.handleError<boolean>('checkForExistingGame'))\n      );\n  }\n  checkExistingGameComplete(): Observable<boolean> {\n    return this.http.get<boolean>(`${this.domain}${this.bowlingApiUrl}/iscomplete`)\n      .pipe(\n        catchError(this.handleError<boolean>('checkExistingGameComplete'))\n      );\n  }\n  reset(): Observable<any> {\n    this.notificationService.clear();\n    return this.http.get(`${this.domain}${this.bowlingApiUrl}/reset`)\n      .pipe(\n        catchError(this.handleError<any>('resetGame'))\n      );\n  }\n\n  private log(message: string) {\n    this.notificationService.add(`BowlingGameService: ${message}`);\n  }\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiBaseUrl: 'https://localhost:44312'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\r\n\nimport { Contestant } from '../../interfaces/contestant';\r\nimport { BowlingGameService } from '../../bowling-game.service';\r\n\n@Component({\n  selector: 'app-contestants',\n  templateUrl: './contestants.component.html',\n  styleUrls: ['./contestants.component.css']\n})\nexport class ContestantsComponent implements OnInit {\n  selectedContestant: Contestant;\n  contestants: Contestant[];\n\n  constructor(public bowlingGameService: BowlingGameService)\n  {\n    this.selectedContestant = {} as Contestant;\n    this.contestants = [];\n  }\n\n  ngOnInit(): void {\n    this.getContestants();\n  }\n  getContestants(): void {\n    this.bowlingGameService.getContestants()\n      .subscribe(contestants => this.contestants = contestants);\n  }\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.contestants.push({contestantName: name, pinsLeft: 10, score: 0} as Contestant)\n    //this.heroService.addHero({ name } as Hero)\n    //  .subscribe(hero => {\n    //    this.heroes.push(hero);\n    //  });\n  }\n  resetGame(): void {\n    this.bowlingGameService.reset().subscribe(_ => this.reset());\r\n  }\n  reset(): void {\n    this.selectedContestant = {} as Contestant;\r\n    this.getContestants();\r\n    this.bowlingGameService.isGameUnderway = false;\r\n    this.bowlingGameService.isGameComplete = false;\r\n    this.bowlingGameService.refreshLeaderboard();\r\n  }\n  async startContest(): Promise<void> {\n    await this.bowlingGameService.addContestants(this.contestants);\r\n    this.bowlingGameService.beginGame();\r\n  }\n  onClick(contestant: Contestant): void {    \n      this.selectedContestant = contestant;\n  }\n}\n","<h1>Contestants</h1>\n<div>\n  <button class=\"clear\" (click)=\"resetGame()\">Reset Cache</button>\n  <div *ngIf=\"contestants.length && !bowlingGameService.isGameUnderway\">\n    <button (click)=\"startContest()\">\n      Begin Game!!!\n    </button>\n  </div>\n  <div *ngIf=\"!bowlingGameService.isGameUnderway; else gamestarted\">\n    <label>\n      Contestant Name (Please use unique names):\n      <input #contestantName />\n    </label>\n    <button (click)=\"add(contestantName.value); contestantName.value=''\">\n      add\n    </button>\n  </div>\n  <ng-template #gamestarted>\n    <div *ngIf=\"!bowlingGameService.isGameComplete; else gamecomplete\">\n      Game in session, select a green contestant to start rolling\n    </div>\n    <ng-template #gamecomplete>\n      <div>\n        Game session has completed. Please start a new game.\n      </div>\n    </ng-template>\n    \n  </ng-template>\n</div>\n<ul class=\"contestants\">\n  <li *ngFor=\"let contestant of contestants\" (click)=\"onClick(contestant)\" [class.selected]=\"contestant === selectedContestant\" [class.completed]=\"contestant.pinsLeft === -1\">\n    <span class=\"badge\" title=\"pins left\">{{contestant.pinsLeft}}</span> {{contestant.contestantName}}\n  </li>\n</ul>\n\n<app-contestant-detail [contestant]=\"selectedContestant\"></app-contestant-detail>\n","import { Component, OnInit } from '@angular/core';\nimport { NotificationsService } from '../../notifications.service';\r\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.css']\n})\nexport class NotificationsComponent implements OnInit {\n\n  constructor(public notificationService: NotificationsService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div *ngIf=\"notificationService.notifications.length\">\r\n\r\n  <h2>Notifications</h2>\r\n  <button class=\"clear\"\r\n          (click)=\"notificationService.clear()\">\r\n    clear\r\n  </button>\r\n  <div *ngFor='let notification of notificationService.notifications'> {{notification}} </div>\r\n\r\n</div>\r\n","import { Component } from '@angular/core';\nimport { BowlingGameService } from './bowling-game.service';\r\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Bowling Game';\n\n  constructor(public bowlingGameService: BowlingGameService) {\r\n  }\n}\n","<h1>{{ title }}</h1>\n<table>\n<tr>\n  <td>\n    <app-contestants></app-contestants>\n  </td>\n  <td style=\"width:100px\">\n\n  </td>\n  <td>\n    <h1 *ngIf=\"bowlingGameService.checkingForGame; else elseBlock\">Checking for an existing game...</h1>\n\n    <ng-template #elseBlock>\n      <div *ngIf=\"bowlingGameService.isGameUnderway; else nogame\">\n        <app-leaderboard></app-leaderboard>\n      </div>\n      <ng-template #nogame>\n        <div>\n          <div>\n            No Games underway - To start, follow the instructions below:\n            <ol>\n              <li>\n                Add Contestants (keep the names unique)\n              </li>\n              <li>\n                Begin the game once your contestant list is complete (you will not be able to add new contestants after the game starts)\n              </li>\n              <li>\n                Select a contestant on the left that you want to start rolling for.\n              </li>\n              <li>\n                Once a contestants turns are complete, they will turn red.\n              </li>\n              <li>\n                The Game automatically completes once all contestants turns are complete.\n              </li>\n            </ol>\n          </div>\n        </div>\n      </ng-template>\n    </ng-template>\n  </td>\n</tr>\n</table>\n<app-notifications></app-notifications>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { ContestantsComponent } from './components/contestants/contestants.component';\nimport { ContestantDetailComponent } from './components/contestant-detail/contestant-detail.component';\nimport { LeaderboardComponent } from './components/leaderboard/leaderboard.component';\nimport { NotificationsComponent } from './components/notifications/notifications.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ContestantsComponent,\n    ContestantDetailComponent,\n    LeaderboardComponent,\n    NotificationsComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { BowlingGameService } from '../../bowling-game.service';\r\n\n@Component({\n  selector: 'app-leaderboard',\n  templateUrl: './leaderboard.component.html',\n  styleUrls: ['./leaderboard.component.css']\n})\nexport class LeaderboardComponent implements OnInit {\n\n  constructor(public bowlingGameService: BowlingGameService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h3>Leaderboard</h3>\r\n<table border=\"1\">\r\n  <tr>\r\n    <th>\r\n      Contestant\r\n    </th>\r\n    <th>\r\n      Score\r\n    </th>\r\n    <th>\r\n      Last Scored Frame\r\n    </th>\r\n  </tr>\r\n  <tr *ngFor='let contestant of bowlingGameService.leaderboard'>\r\n    <td>\r\n      {{contestant.contestantName}}\r\n    </td>\r\n    <td>\r\n      {{contestant.score}}\r\n    </td>\r\n    <td>\r\n      {{contestant.scoreFrame}}\r\n    </td>\r\n  </tr>\r\n</table>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { BowlingGameService } from '../../bowling-game.service';\r\nimport { Contestant } from '../../interfaces/contestant';\r\nimport { NotificationsService } from '../../notifications.service';\r\n\n@Component({\n  selector: 'app-contestant-detail',\n  templateUrl: './contestant-detail.component.html',\n  styleUrls: ['./contestant-detail.component.css']\n})\nexport class ContestantDetailComponent implements OnInit {\n  @Input()\r\n  contestant!: Contestant;\n  busy = false;\n\n  constructor(public bowlingGameService: BowlingGameService, public notificationService: NotificationsService) { }\n\n  ngOnInit(): void {\n    this.notificationService.addRoll\n  }\n\n  async roll(contestant: Contestant, pins: string): Promise<number> {\n    this.busy = true;\n    let parsedPins: number = +pins;\n    parsedPins = Math.min(parsedPins, contestant.pinsLeft);\n    contestant.pinsLeft = await this.bowlingGameService.roll(contestant, parsedPins);\r\n    this.bowlingGameService.refreshLeaderboard();\r\n    this.busy = false;\r\n    this.notificationService.addRoll(contestant, parsedPins);\r\n\r\n    if (contestant.pinsLeft < 0) {\r\n      this.bowlingGameService.checkExistingGameComplete().subscribe(x => this.bowlingGameService.isGameComplete = x)\r\n    }      \r\n\r\n    return contestant.pinsLeft < 0 ? 0 : contestant.pinsLeft;\r\n  }\n}\n","<div *ngIf=\"contestant.contestantName\">\n  <h2>{{contestant.contestantName | uppercase}}</h2>\n  <div *ngIf=\"bowlingGameService.isGameUnderway; else nogame\">    \n    <div>\n      <div *ngIf=\"contestant.pinsLeft > -1; else nomoretries\">\n        <div><span>pins left on next throw: </span>{{contestant.pinsLeft}}</div>\n        Only a maximum of {{contestant.pinsLeft}} can be thrown on your next throw<br />\n        <label>\n          Roll Amount:\n          <input type=\"number\" min=\"0\" max=\"{{contestant.pinsLeft}}\" #rollAmount />\n        </label>\n        <button (click)=\"roll(contestant, rollAmount.value)\" [attr.disabled]=\"busy ? '': null\">\n          roll\n        </button>\n      </div>\n      <ng-template #nomoretries>\n        <br />\n        Contestant has no more attempts\n      </ng-template>\n    </div>\n  </div>\n  <ng-template #nogame>\n    <div>\n      You will need to begin the game to start rolling\n    </div>\n  </ng-template>\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}