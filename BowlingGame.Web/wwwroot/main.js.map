{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/bowling-game.service.ts","./src/app/components/contestant-detail/contestant-detail.component.html","./src/app/components/contestant-detail/contestant-detail.component.ts","./src/app/components/contestants/contestants.component.html","./src/app/components/contestants/contestants.component.ts","./src/app/components/leaderboard/leaderboard.component.html","./src/app/components/leaderboard/leaderboard.component.ts","./src/app/components/notifications/notifications.component.html","./src/app/components/notifications/notifications.component.ts","./src/app/notifications.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<h1>{{ title }}</h1>\r\n<h3>{{ description }}</h3>\r\n<table>\r\n<tr>\r\n  <td>\r\n    <app-contestants></app-contestants>\r\n  </td>\r\n  <td style=\"width:100px\">\r\n\r\n  </td>\r\n  <td>\r\n    <h1 *ngIf=\"bowlingGameService.checkingForGame; else elseBlock\">Checking for an existing game...</h1>\r\n\r\n    <ng-template #elseBlock>\r\n      <div *ngIf=\"bowlingGameService.isGameUnderway; else nogame\">\r\n        <app-leaderboard></app-leaderboard>\r\n      </div>\r\n      <ng-template #nogame>\r\n        <div>\r\n          <div>\r\n            <h3>If you got to this point without any errors in the notifications area, you should be good to go</h3>\r\n            No Games underway - To start, follow the instructions below:\r\n            <ol>\r\n              <li>\r\n                Add Contestants (keep the names unique)\r\n              </li>\r\n              <li>\r\n                Begin the game once your contestant list is complete (you will not be able to add new contestants after the game starts)\r\n              </li>\r\n              <li>\r\n                Select a contestant on the left that you want to start rolling for.\r\n              </li>\r\n              <li>\r\n                Once a contestants turns are complete, they will turn red.\r\n              </li>\r\n              <li>\r\n                The Game automatically completes once all contestants turns are complete.\r\n              </li>\r\n              <li>\r\n                Game's are cached in the Api, to start a new game, you will need to click 'Start a new game'\r\n              </li>\r\n              <li>\r\n                There *should be no way to cheat, you are welcome to try :)\r\n              </li>\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </ng-template>\r\n  </td>\r\n</tr>\r\n</table>\r\n<app-notifications></app-notifications>\r\n\r\n","import { Component } from '@angular/core';\r\nimport { BowlingGameService } from './bowling-game.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Welcome to the Imaginary Bowling Game';\r\n  description = 'Where it literally all happens in your head, the app just keeps score.';\r\n\r\n  constructor(public bowlingGameService: BowlingGameService) {\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ContestantsComponent } from './components/contestants/contestants.component';\r\nimport { ContestantDetailComponent } from './components/contestant-detail/contestant-detail.component';\r\nimport { LeaderboardComponent } from './components/leaderboard/leaderboard.component';\r\nimport { NotificationsComponent } from './components/notifications/notifications.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ContestantsComponent,\r\n    ContestantDetailComponent,\r\n    LeaderboardComponent,\r\n    NotificationsComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Contestant } from './interfaces/contestant';\r\nimport { NotificationsService } from './notifications.service'\r\nimport { Leaderboard } from './interfaces/leaderboard';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BowlingGameService {\r\n  private domain: string;\r\n  private bowlingApiUrl = '/api/bowling';\r\n  isGameComplete: boolean;\r\n  isGameUnderway: boolean;\r\n  checkingForGame: boolean;\r\n  leaderboard: Leaderboard[];\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n  constructor(private http: HttpClient, private notificationService: NotificationsService)\r\n  {\r\n    this.domain = environment.apiBaseUrl;\r\n    this.isGameComplete = false;\r\n    this.isGameUnderway = false;\r\n    this.checkingForGame = true;\r\n    this.leaderboard = [];\r\n\r\n    this.checkForExistingGame().subscribe(x => this.isGameUnderway = x);\r\n    this.checkExistingGameComplete().subscribe(x => this.checkGameComplete(x));\r\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\r\n  }\r\n\r\n  private checkGameComplete(isComplete: boolean): void {\r\n    this.isGameComplete = isComplete;\r\n    this.checkingForGame = false\r\n  }\r\n\r\n  refreshLeaderboard(): void {\r\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\r\n  }\r\n  refreshPage(): void {\r\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\r\n  }\r\n  beginGame(): void {\r\n    this.isGameUnderway = true;\r\n    this.isGameComplete = false;\r\n    this.getLeaderboard().subscribe(x => this.leaderboard = x);\r\n    this.log('Game has begun');\r\n  }\r\n  resetGame(): void {\r\n    this.reset().subscribe(_ => this.isGameUnderway = false);\r\n    this.isGameComplete = false;\r\n    this.refreshLeaderboard();\r\n  }\r\n\r\n  //Post, intentionally implemented synchronously\r\n  async roll(contestant: Contestant, pinsKnocked: number): Promise<number> {\r\n    return await this.http.post<number>(`${this.domain}${this.bowlingApiUrl}/roll`, { contestantName: contestant.contestantName, pinsKnocked: pinsKnocked }, this.httpOptions).toPromise();\r\n  }\r\n  async addContestants(contestants: Contestant[]): Promise<boolean> {\r\n    return await this.http.post<boolean>(`${this.domain}${this.bowlingApiUrl}/addcontestants`, contestants, this.httpOptions).toPromise();\r\n  }\r\n\r\n  //Get\r\n  getLeaderboard(): Observable<Leaderboard[]> {\r\n    return this.http.get<Leaderboard[]>(`${this.domain}${this.bowlingApiUrl}/leaderboard`)\r\n      .pipe(\r\n        catchError(this.handleError<Leaderboard[]>('getLeaderboard', []))\r\n      );\r\n  }\r\n  getContestants(): Observable<Contestant[]> {\r\n    return this.http.get<Contestant[]>(`${this.domain}${this.bowlingApiUrl}/getcontestants`)\r\n      .pipe(\r\n        tap(_ => this.log('fetched contestants')),\r\n        catchError(this.handleError<Contestant[]>('getContestants', []))\r\n      );\r\n  }\r\n  checkForExistingGame(): Observable<boolean> {\r\n    return this.http.get<boolean>(`${this.domain}${this.bowlingApiUrl}/hasexisting`)\r\n      .pipe(\r\n        tap(x => this.isGameUnderway = x),\r\n        catchError(this.handleError<boolean>('checkForExistingGame'))\r\n      );\r\n  }\r\n  checkExistingGameComplete(): Observable<boolean> {\r\n    return this.http.get<boolean>(`${this.domain}${this.bowlingApiUrl}/iscomplete`)\r\n      .pipe(\r\n        catchError(this.handleError<boolean>('checkExistingGameComplete'))\r\n      );\r\n  }\r\n  reset(): Observable<any> {\r\n    this.notificationService.clear();\r\n    return this.http.get(`${this.domain}${this.bowlingApiUrl}/reset`)\r\n      .pipe(\r\n        catchError(this.handleError<any>('resetGame'))\r\n      );\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.notificationService.add(`BowlingGameService: ${message}`);\r\n  }\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","<div *ngIf=\"contestant.contestantName\">\r\n  <h2>{{contestant.contestantName | uppercase}}</h2>\r\n  <div *ngIf=\"bowlingGameService.isGameUnderway; else nogame\">    \r\n    <div>\r\n      <div *ngIf=\"contestant.pinsLeft > -1; else nomoretries\">\r\n        <div><span>pins left on next throw: </span>{{contestant.pinsLeft}}</div>\r\n        Only a maximum of {{contestant.pinsLeft}} can be thrown on your next throw<br />\r\n        <label>\r\n          Roll Amount:\r\n          <input type=\"number\" min=\"0\" max=\"{{contestant.pinsLeft}}\" #rollAmount />\r\n        </label>\r\n        <button (click)=\"roll(contestant, rollAmount.value)\" [attr.disabled]=\"busy ? '': null\">\r\n          roll\r\n        </button>\r\n      </div>\r\n      <ng-template #nomoretries>\r\n        <br />\r\n        Contestant has no more attempts\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n  <ng-template #nogame>\r\n    <div>\r\n      You will need to begin the game to start rolling\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { BowlingGameService } from '../../bowling-game.service';\r\nimport { Contestant } from '../../interfaces/contestant';\r\nimport { NotificationsService } from '../../notifications.service';\r\n\r\n@Component({\r\n  selector: 'app-contestant-detail',\r\n  templateUrl: './contestant-detail.component.html',\r\n  styleUrls: ['./contestant-detail.component.css']\r\n})\r\nexport class ContestantDetailComponent implements OnInit {\r\n  @Input()\r\n  contestant!: Contestant;\r\n  busy = false;\r\n\r\n  constructor(public bowlingGameService: BowlingGameService, public notificationService: NotificationsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.notificationService.addRoll\r\n  }\r\n\r\n  async roll(contestant: Contestant, pins: string): Promise<number> {\r\n    this.busy = true;\r\n    let parsedPins: number = +pins;\r\n    parsedPins = Math.min(parsedPins, contestant.pinsLeft);\r\n    contestant.pinsLeft = await this.bowlingGameService.roll(contestant, parsedPins);\r\n    this.bowlingGameService.refreshLeaderboard();\r\n    this.busy = false;\r\n    this.notificationService.addRoll(contestant, parsedPins);\r\n\r\n    if (contestant.pinsLeft < 0) {\r\n      this.bowlingGameService.checkExistingGameComplete().subscribe(x => this.bowlingGameService.isGameComplete = x)\r\n    }      \r\n\r\n    return contestant.pinsLeft < 0 ? 0 : contestant.pinsLeft;\r\n  }\r\n}\r\n","<h1>Contestants</h1>\r\n<div>\r\n  <button class=\"clear\" (click)=\"resetGame()\">Start a new game</button>\r\n  <div *ngIf=\"contestants.length && !bowlingGameService.isGameUnderway\">\r\n    <b>Click me to begin => <button (click)=\"startContest()\">Begin Game!!!</button></b><br/><br/>\r\n  </div>\r\n  <div *ngIf=\"!bowlingGameService.isGameUnderway; else gamestarted\">\r\n    <label>\r\n      Contestant Name (Please use unique names):\r\n      <input #contestantName />\r\n    </label>\r\n    <button (click)=\"add(contestantName.value); contestantName.value=''\">\r\n      add\r\n    </button>\r\n  </div>\r\n  <ng-template #gamestarted>\r\n    <div *ngIf=\"!bowlingGameService.isGameComplete; else gamecomplete\">\r\n      Game in session, select a green contestant to start rolling\r\n    </div>\r\n    <ng-template #gamecomplete>\r\n      <div>\r\n        Game session has completed. Please start a new game.\r\n      </div>\r\n    </ng-template>\r\n    \r\n  </ng-template>\r\n</div>\r\n<ul class=\"contestants\">\r\n  <li *ngFor=\"let contestant of contestants\" (click)=\"onClick(contestant)\" [class.selected]=\"contestant === selectedContestant\" [class.completed]=\"contestant.pinsLeft === -1\">\r\n    <span class=\"badge\" title=\"pins left\">{{contestant.pinsLeft}}</span> {{contestant.contestantName}}\r\n  </li>\r\n</ul>\r\n\r\n<app-contestant-detail [contestant]=\"selectedContestant\"></app-contestant-detail>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Contestant } from '../../interfaces/contestant';\r\nimport { BowlingGameService } from '../../bowling-game.service';\r\n\r\n@Component({\r\n  selector: 'app-contestants',\r\n  templateUrl: './contestants.component.html',\r\n  styleUrls: ['./contestants.component.css']\r\n})\r\nexport class ContestantsComponent implements OnInit {\r\n  selectedContestant: Contestant;\r\n  contestants: Contestant[];\r\n\r\n  constructor(public bowlingGameService: BowlingGameService)\r\n  {\r\n    this.selectedContestant = {} as Contestant;\r\n    this.contestants = [];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getContestants();\r\n  }\r\n  getContestants(): void {\r\n    this.bowlingGameService.getContestants()\r\n      .subscribe(contestants => this.contestants = contestants);\r\n  }\r\n  add(name: string): void {\r\n    name = name.trim();\r\n    if (!name) { return; }\r\n    this.contestants.push({contestantName: name, pinsLeft: 10, score: 0} as Contestant)\r\n  }\r\n  resetGame(): void {\r\n    this.bowlingGameService.reset().subscribe(_ => this.reset());\r\n  }\r\n  reset(): void {\r\n    this.selectedContestant = {} as Contestant;\r\n    this.getContestants();\r\n    this.bowlingGameService.isGameUnderway = false;\r\n    this.bowlingGameService.isGameComplete = false;\r\n    this.bowlingGameService.refreshLeaderboard();\r\n  }\r\n  async startContest(): Promise<void> {\r\n    await this.bowlingGameService.addContestants(this.contestants);\r\n    this.bowlingGameService.beginGame();\r\n  }\r\n  onClick(contestant: Contestant): void {    \r\n      this.selectedContestant = contestant;\r\n  }\r\n}\r\n","<h3>Leaderboard</h3>\r\n<table border=\"1\">\r\n  <tr>\r\n    <th>\r\n      Contestant\r\n    </th>\r\n    <th>\r\n      Score\r\n    </th>\r\n    <th>\r\n      Last Scored Frame\r\n    </th>\r\n  </tr>\r\n  <tr *ngFor='let contestant of bowlingGameService.leaderboard'>\r\n    <td>\r\n      {{contestant.contestantName}}\r\n    </td>\r\n    <td>\r\n      {{contestant.score}}\r\n    </td>\r\n    <td>\r\n      {{contestant.scoreFrame}}\r\n    </td>\r\n  </tr>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { BowlingGameService } from '../../bowling-game.service';\r\n\r\n@Component({\r\n  selector: 'app-leaderboard',\r\n  templateUrl: './leaderboard.component.html',\r\n  styleUrls: ['./leaderboard.component.css']\r\n})\r\nexport class LeaderboardComponent implements OnInit {\r\n\r\n  constructor(public bowlingGameService: BowlingGameService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"notificationService.notifications.length\">\r\n\r\n  <h2>Notifications</h2>\r\n  <button class=\"clear\"\r\n          (click)=\"notificationService.clear()\">\r\n    clear\r\n  </button>\r\n  <div *ngFor='let notification of notificationService.notifications'> {{notification}} </div>\r\n\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { NotificationsService } from '../../notifications.service';\r\n\r\n@Component({\r\n  selector: 'app-notifications',\r\n  templateUrl: './notifications.component.html',\r\n  styleUrls: ['./notifications.component.css']\r\n})\r\nexport class NotificationsComponent implements OnInit {\r\n\r\n  constructor(public notificationService: NotificationsService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Contestant } from './interfaces/contestant';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationsService {\r\n  notifications: string[] = [];\r\n\r\n  add(message: string) {\r\n    this.notifications.push(message);\r\n  }\r\n\r\n  addRoll(contestant: Contestant, rollAmount: number) {\r\n    this.notifications.push(`${contestant.contestantName} knocked ${rollAmount} pins. Next throw has maximum of ${contestant.pinsLeft}.`);\r\n  }\r\n\r\n  clear() {\r\n    this.notifications = [];\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiBaseUrl: ''\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}